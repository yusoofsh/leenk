---
import { AstroFont } from "astro-font";
import { SimpleAnalytics } from "astro-simpleanalytics-plugin";
import { Background } from "../components/background";

import "../styles/global.css";
---

<!doctype html>
<html lang="en" data-bio-mode="full">
  <head>
    <meta charset="UTF-8" />
    <meta content="width=device-width" name="viewport" />
    <link href="favicon.ico" rel="icon" type="image/svg+xml" />
    <meta
      content="#f9fafb"
      media="(prefers-color-scheme: light)"
      name="theme-color"
    />
    <meta
      content="#030712"
      media="(prefers-color-scheme: dark)"
      name="theme-color"
    />
    <meta content={Astro.generator} name="generator" />
    <meta content="Quick introduction of my interests." name="description" />
    <script is:inline>
      (() => {
        if (typeof document === "undefined") {
          return;
        }

        const STORAGE_KEY = "bio-mode";
        const root = document.documentElement;

        const readStoredMode = () => {
          try {
            const stored = window.localStorage.getItem(STORAGE_KEY);
            if (stored === "full" || stored === "tldr") {
              return stored;
            }
          } catch (error) {
            return null;
          }
        };

        const systemMode = () =>
          window.matchMedia &&
          window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "tldr"
            : "full";

        const mode = readStoredMode() ?? systemMode();
        root.dataset.bioMode = mode;
        root.classList.toggle("dark", mode === "tldr");
      })();
    </script>
    <title>Meet me, Yusoof Moh</title>
    <AstroFont
      config={[
        {
          display: "optional",
          fallback: "sans-serif",
          name: "Plus Jakarta Sans",
          selector: "body",
          src: [
            {
              path: "/fonts/PlusJakartaSans-VariableFont_wght.woff2",
              style: "normal",
            },
          ],
        },
      ]}
    />
    <script>
      declare global {
        interface Window {
          sa_event: any;
        }
      }

      const saEvent = function () {
        var a = [].slice.call(arguments);
        window.sa_event.q
          ? window.sa_event.q.push(a)
          : (window.sa_event.q = [a]);
      };

      window.sa_event = window.sa_event || saEvent;
    </script>
  </head>
  <body>
    <main>
      <Background client:load>
        <slot />
      </Background>
    </main>
    <SimpleAnalytics allEnvironments={true} collectDNT={true} />
  </body>
</html>
