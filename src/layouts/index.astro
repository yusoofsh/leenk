---
import { AstroFont } from "astro-font";
import { SimpleAnalytics } from "astro-simpleanalytics-plugin";

import "../styles/global.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta content="width=device-width" name="viewport" />
    <link href="favicon.ico" rel="icon" type="image/svg+xml" />
    <meta
      content="#f9fafb"
      media="(prefers-color-scheme: light)"
      name="theme-color"
    />
    <meta
      content="#030712"
      media="(prefers-color-scheme: dark)"
      name="theme-color"
    />
    <meta content={Astro.generator} name="generator" />
    <meta content="Quick introduction of my interests." name="description" />
    <title>Meet me, Yusoof Moh</title>
    <AstroFont
      config={[
        {
          display: "optional",
          fallback: "sans-serif",
          name: "Plus Jakarta Sans",
          selector: "body",
          src: [
            {
              path: "/fonts/PlusJakartaSans-VariableFont_wght.woff2",
              style: "normal",
            },
          ],
        },
      ]}
    />
    <script>
      declare global {
        interface Window {
          sa_event: any;
        }
      }

      const saEvent = function () {
        var a = [].slice.call(arguments);
        window.sa_event.q
          ? window.sa_event.q.push(a)
          : (window.sa_event.q = [a]);
      };

      window.sa_event = window.sa_event || saEvent;
    </script>
  </head>
  <body>
    <main
      class="flex min-h-dvh items-center justify-center bg-gradient-to-br from-gray-50 to-gray-200 dark:from-gray-950 dark:to-gray-900"
    >
      <slot />
    </main>
    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
    <SimpleAnalytics allEnvironments={true} collectDNT={true} />
  </body>
</html>
